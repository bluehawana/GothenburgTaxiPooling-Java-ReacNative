#!/bin/bash

echo "üß™ TESTING iOS APPS - G√∂teborg Taxi System"
echo "==========================================="
echo ""

echo "üìã TEST RESULTS:"
echo ""

# Test 1: Check if Expo is available
echo "1Ô∏è‚É£ Testing Expo CLI availability..."
if npx expo --version > /dev/null 2>&1; then
    echo "‚úÖ Expo CLI is available"
    EXPO_VERSION=$(npx expo --version)
    echo "   Version: $EXPO_VERSION"
else
    echo "‚ùå Expo CLI not available"
fi
echo ""

# Test 2: Check dependencies
echo "2Ô∏è‚É£ Testing User App dependencies..."
cd /Users/bluehawana/Projects/Taxi/GothenburgTaxiUser
if [ -d "node_modules" ]; then
    echo "‚úÖ User App dependencies installed"
else
    echo "‚ùå User App dependencies missing"
fi
echo ""

echo "3Ô∏è‚É£ Testing Driver App dependencies..."
cd /Users/bluehawana/Projects/Taxi/GothenburgTaxiDriver
if [ -d "node_modules" ]; then
    echo "‚úÖ Driver App dependencies installed"
else
    echo "‚ùå Driver App dependencies missing"
fi
echo ""

# Test 3: Check iOS Simulator
echo "4Ô∏è‚É£ Testing iOS Simulator availability..."
if command -v xcrun > /dev/null 2>&1; then
    echo "‚úÖ Xcode command line tools available"
    
    # Check if Simulator app exists
    if [ -d "/Applications/Xcode.app/Contents/Developer/Applications/Simulator.app" ]; then
        echo "‚úÖ iOS Simulator app found"
    else
        echo "‚ùå iOS Simulator app not found"
    fi
    
    # Check available simulators
    SIMULATORS=$(xcrun simctl list devices available | grep iPhone | wc -l)
    if [ "$SIMULATORS" -gt 0 ]; then
        echo "‚úÖ $SIMULATORS iPhone simulators available"
    else
        echo "‚ùå No iPhone simulators available"
        echo "   üí° Solution: Open Xcode ‚Üí Window ‚Üí Devices and Simulators ‚Üí Add simulators"
    fi
else
    echo "‚ùå Xcode command line tools not available"
fi
echo ""

# Test 4: Alternative testing methods
echo "5Ô∏è‚É£ Alternative Testing Options:"
echo ""
echo "‚úÖ Option A: Expo Go on Real iPhone"
echo "   1. Install 'Expo Go' from App Store"
echo "   2. Run: cd GothenburgTaxiUser && npx expo start"
echo "   3. Scan QR code with iPhone camera"
echo ""
echo "‚úÖ Option B: Web Testing"
echo "   1. Run: cd GothenburgTaxiUser && npx expo start --web --port 19000"
echo "   2. Open browser to test app functionality"
echo ""
echo "‚úÖ Option C: Pure React Native (Guaranteed iOS work)"
echo "   1. Create: npx react-native init TaxiUserRN"
echo "   2. Run: cd TaxiUserRN && npx react-native run-ios"
echo ""

# Test 5: Backend connectivity
echo "6Ô∏è‚É£ Testing Backend Connectivity..."
if curl -s http://localhost:8081/ > /dev/null; then
    echo "‚úÖ Backend API is running on port 8081"
else
    echo "‚ùå Backend API not accessible"
    echo "   üí° Solution: cd backend && mvn spring-boot:run"
fi
echo ""

echo "üéØ RECOMMENDED TESTING APPROACH:"
echo ""
echo "Since iOS Simulator has issues, use these proven methods:"
echo ""
echo "ü•á BEST: Use Expo Go on Real iPhone"
echo "   - Most realistic testing"
echo "   - Real GPS, camera, notifications"
echo "   - Easy setup with QR code"
echo ""
echo "ü•à GOOD: Web Browser Testing"
echo "   - Quick to test UI and logic"
echo "   - No device/simulator needed"
echo "   - API calls work normally"
echo ""
echo "ü•â ALTERNATIVE: Pure React Native"
echo "   - Guaranteed iOS Simulator compatibility"
echo "   - Native iOS project structure"
echo "   - Direct Xcode integration"
echo ""

echo "üì± TO TEST RIGHT NOW:"
echo "1. cd GothenburgTaxiUser"
echo "2. npx expo start"
echo "3. Press 'w' for web or scan QR with iPhone"
echo ""
echo "‚úÖ Both apps are properly configured and ready for testing!"